---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# python-project-tag-push-verify-action
name: "🐍 Check Pushed Tag Matches Project Version"
description: "Checks a pushed tag matches the declared Python project version"

inputs:
  EXIT_ON_FAIL:
    description: "When set true will exit with error on version mismatch"
    type: 'boolean'
    required: false
    default: "true"
  PATH_PREFIX:
    description: "Directory location containing project code"
    type: string
    required: false
  # For testing purposes ONLY, do not use
  TEST_TAG:
    description: "Undocumented test input/value"
    type: string
    required: false

outputs:
  MATCH:
    description: "Set true when pushed tags match Python project metadata"
    value: ${{ steps.verify.outputs.match }}

runs:
  using: "composite"
  steps:
    - name: "Retrieve Python project version"
      id: fetch
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/python-project-version-action@704bc148b3b7739452843a1dcb2ed57c804d58f7 # v0.1.3
      with:
        path_prefix: "${{ inputs.PATH_PREFIX }}"

    - name: "Check tag/version for match"
      id: verify
      shell: bash
      run: |
        # Check tag/versions for consistency
        EXIT_ON_FAIL="${{ inputs.exit_on_fail }}"
        # This code path only conditionally triggered for testing purposes
        if [ "${{ github.ref_type }}" = 'tag' ]; then
          PUSHED_TAG="${{ github.ref_name }}"
        else
          PUSHED_TAG="${{ inputs.test_tag }}"
        fi

        # Validate outputs from previous action
        PROJECT_VERSION="${{ steps.fetch.outputs.python_project_version }}"
        if [ -z "$PROJECT_VERSION" ]; then
          echo "The python project version string was empty ❌"
          echo "Check action/workflow inputs/output/variables"
          exit 1
        fi

        compareTag() {
          if [ "$1" = "$2" ]; then
            echo "true"
          else
            echo "false"
          fi
        }

        # Get version from pushed tag
        echo "Project version: $PROJECT_VERSION"
        echo "Pushed tag:      $PUSHED_TAG"

        # Perform comparison check
        RESULT=$(compareTag "$PUSHED_TAG" "$PROJECT_VERSION")
        if [ "$RESULT" != "MATCH" ]; then
          # If present, strip the leading "v" character and retry
          if [[ "$PUSHED_TAG" == v* ]]; then
            PUSHED_TAG="${PUSHED_TAG:1}"
          fi
          RESULT=$(compareTag "$PUSHED_TAG" "$PROJECT_VERSION")
        fi

        # Set output values
        echo "match=$RESULT" >> "$GITHUB_ENV"
        echo "match=$RESULT" >> "$GITHUB_OUTPUT"
        if [ "$RESULT" = "true" ]; then
          echo "Pushed tag matches version in Python project ✅"
        else
          echo "Error: pushed tag does NOT match version in Python project ❌"
          echo "Error: pushed tag does NOT match version in Python project ❌" \
            >> "$GITHUB_STEP_SUMMARY"
          if [ "f$EXIT_ON_FAIL" = "ftrue" ]; then
            exit 1
          fi
        fi
