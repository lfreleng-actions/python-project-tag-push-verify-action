---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# python-project-tag-push-verify-action
name: '🐍 Check Pushed Tag Matches Project Version'
description: 'Checks a pushed tag matches the declared Python project version'

inputs:
  exit_on_fail:
    description: 'When set true will exit with error on version mismatch'
    type: 'boolean'
    required: false
    default: "true"
  path_prefix:
    description: 'Directory location containing project code'
    type: 'string'
    required: false
  # For testing purposes ONLY, do not use
  test_tag:
    description: 'Undocumented test input/value'
    type: 'string'
    required: false

outputs:
  match:
    description: 'Set true when pushed tags match Python project metadata'
    value: "${{ steps.verify.outputs.match }}"
  matched_tag:
    description: 'Matched tag/version value'
    value: "${{ steps.verify.outputs.matched_tag }}"

runs:
  using: 'composite'
  steps:
    - name: 'Retrieve Python project version'
      id: fetch
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/python-project-version-action@704bc148b3b7739452843a1dcb2ed57c804d58f7 # v0.1.3
      with:
        path_prefix: "${{ inputs.path_prefix }}"

    - name: 'Check tag/version for match'
      id: verify
      shell: bash
      run: |
        # Check tag/versions for consistency
        exit_on_fail="${{ inputs.exit_on_fail }}"
        # This code path only conditionally triggered for testing purposes
        if [ "${{ github.ref_type }}" = 'tag' ]; then
          pushed_tag="${{ github.ref_name }}"
        else
          pushed_tag="${{ inputs.test_tag }}"
        fi

        # Validate outputs from previous action
        project_version="${{ steps.fetch.outputs.python_project_version }}"
        if [ -z "$project_version" ]; then
          echo "The python project version string was empty ❌"
          echo "Check action/workflow inputs/output/variables"
          exit 1
        fi

        compareTag() {
          if [ "$1" = "$2" ]; then
            echo "true"
          else
            echo "false"
          fi
        }

        # Display the compared versions
        echo "Project version: $project_version"
        echo "Pushed tag:      $pushed_tag"

        # Perform comparison check
        result=$(compareTag "$pushed_tag" "$project_version")
        if [ "$result" != "MATCH" ]; then
          # If present, strip the leading "v" character and retry
          if [[ "$pushed_tag" == v* ]]; then
            pushed_tag="${pushed_tag:1}"
          fi
          result=$(compareTag "$pushed_tag" "$project_version")
        fi

        # Set output values
        echo "match=$result" >> "$GITHUB_ENV"
        echo "match=$result" >> "$GITHUB_OUTPUT"
        echo "matched_tag=$pushed_tag" >> "$GITHUB_ENV"
        echo "matched_tag=$pushed_tag" >> "$GITHUB_OUTPUT"

        if [ "$result" = "true" ]; then
          echo 'Pushed tag matches version in Python project ✅'
        else
          echo 'Error: pushed tag does NOT match Python project version ❌'
          echo 'Error: pushed tag does NOT match Python project version ❌' \
            >> "$GITHUB_STEP_SUMMARY"
          if [ "f$exit_on_fail" = "ftrue" ]; then
            exit 1
          fi
        fi
